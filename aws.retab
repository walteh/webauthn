
file "deployment-pipeline.yaml" {
	dir = "./.codecatalyst/workflows"
	data = {
		Name          = "deployment-pipeline"
		RunMode       = "SUPERSEDED"
		SchemaVersion = "1.0"
		Triggers = [
			{
				Branches = ["revamp", "main"]
				Type     = "PUSH"
			}
		]
		Actions = {
			build = {
				Actions = {
					package = action.build.action.package,
					synth   = action.build.action.synth
				}
				DependsOn = []
			}
			beta = {
				Actions = {
					deploy = action.beta.deploy,
					test   = action.beta.test
				}
				DependsOn = ["build"]
			}
			gamma_us_east_1 = {
				Actions = {
					deploy = action.gamma_us_east_1.action.deploy,
					test   = action.gamma_us_east_1.action.test
				}
				DependsOn = ["beta"]
			}
			gamma_us_west_2 = {
				Actions = {
					deploy = action.gamma_us_west_2.action.deploy,
					test   = action.gamma_us_west_2.action.test
				}
				DependsOn = ["beta"]
			}
			prod_us_east_1 = {
				Actions = {
					deploy = action.prod_us_east_1.action.deploy
				}
				DependsOn = ["gamma_us_west_2", "gamma_us_east_1"]
			}
			prod_us_west_2 = {
				Actions = {
					deploy = action.prod_us_west_2.action.deploy
				}
				DependsOn = ["gamma_us_west_2", "gamma_us_east_1"]
			}
		}
	}
}

environment "beta" {
	Connections = [
		{
			Name = "main"
			Role = "CodeCatalystWorkflowDevelopmentRole-nugg.xyz"
		}
	]
	Name = "beta"
}

environment "gamma" {
	Connections = [
		{
			Name = "gamma"
			Role = "codecatalyst"
		}
	]
	Name = "gamma"
}

environment "production" {
	Connections = [
		{
			Name = "prod"
			Role = "codecatalyst"
		}
	]
	Name = "production"
}

region {
	us_east_1 = "us-east-1"
	us_west_2 = "us-west-2"
}

action "beta" {
	deploy {
		Configuration = {
			CdkRootPath = "infrastructure"
			Context     = jsonencode({ deploymentConfigurationName = "CodeDeployDefault.ECSCanary10Percent5Minutes" })
			Region      = region.us_east_1
			StackName   = "sample-cdk-pipeline"
		}
		DependsOn   = ["Build"]
		Environment = environment.beta
		Identifier  = "aws/cdk-deploy@v1"
		Inputs = {
			Sources = ["WorkflowSource"]
		}
	}
	test {
		Configuration = {
			Steps = [
				{ Run = "mvn --batch-mode --no-transfer-progress soapui:test -Dsoapui.endpoint=$${endpointUrl}" },
				{
					Run = <<EOT
						mvn --batch-mode --no-transfer-progress compile jmeter:jmeter jmeter:results -Djmeter.endpoint=$${endpointUrl} -Djmeter.threads=300 -Djmeter.duration=300 -Djmeter.throughput=6000
					EOT
				}
			]
		}
		Identifier = "aws/managed-test@v1"
		Inputs = {
			Artifacts = ["synth"]
			Variables = [{
				Name  = "endpointUrl"
				Value = "$${Deploy.endpointUrl}"
			}]
		}
		Outputs "AutoDiscoverReports" {
			Enabled          = true
			IncludePaths     = ["target/soapui-reports/*"]
			ReportNamePrefix = "beta"
			SuccessCriteria = {
				PassRate = 100
			}
		}
	}
	DependsOn = ["Build"]
}

action "build" {
	action "package" {
		Compute = {
			Fleet = "Linux.Arm64.Large"
			Type  = "EC2"
		}
		Configuration = {
			Steps = [
				{
					Run = <<EOT
						cd /root/.goenv/plugins/go-build/../.. && git pull && cd - && goenv install 1.21.5 && goenv global 1.21.5
					EOT
				},
				{ Run = "npm install -g @go-task/cli" },
				{ Run = "task test-ci" },
				{ Run = "go build -o ./bin/out ./cmd" }
			]
		}
		Identifier = "aws/build@v1"
		Inputs = {
			Sources = ["WorkflowSource"]
		}
		Outputs = {
			Artifacts = [{
				Files = ["./bin/out"]
				Name  = "build_package"
			}]
			AutoDiscoverReports = {
				Enabled          = true
				ReportNamePrefix = "build"
				SuccessCriteria = {
					PassRate = 100
				}
			}
		}
	}
	action "synth" {
		Compute = {
			Fleet = "Linux.Arm64.Large"
			Type  = "EC2"
		}
		Configuration = {
			Steps = [
				{ Run = "cd /root/.goenv/plugins/go-build/../.. && git pull && cd - && goenv install 1.21.5 && goenv global 1.21.5" },
				{ Run = "npm install -g @go-task/cli" },
				{ Run = "task test-cdk-ci" },
				{ Run = "task cdk-synth" },
				{ Run = "mv infrastructure/cdk.out ." },
				{ Run = "mv infrastructure/cdk.json ." }
			]
		}
		Identifier = "aws/build@v1"
		Inputs = {
			Sources = ["WorkflowSource"]
		}
		Outputs = {
			Artifacts = [{
				Files = ["cdk.out/**/*", "cdk.json"]
				Name  = "build_synth"
			}]
			AutoDiscoverReports = {
				Enabled          = true
				IncludePaths     = ["test-reports/*"]
				ReportNamePrefix = "synth"
				SuccessCriteria = {
					PassRate = 100
				}
			}
		}
	}
}

action "gamma_us_east_1" {
	action "deploy" {
		Configuration = {
			CfnOutputVariables = jsonencode(["endpointUrl"])
			Context            = jsonencode({ deploymentConfigurationName = "CodeDeployDefault.ECSCanary10Percent5Minutes" })
			Region             = region.us_east_1
			StackName          = "fruit-api"
		}
		DependsOn   = ["beta"]
		Environment = environment.gamma
		Identifier  = "aws/cdk-deploy@v1"
		Inputs = {
			Artifacts = ["synth"]
		}
	}
	action "test" {
		Configuration = {
			Steps = [
				{ Run = "mvn --batch-mode --no-transfer-progress soapui:test -Dsoapui.endpoint=$${endpointUrl}" },
				{ Run = "mvn --batch-mode --no-transfer-progress compile jmeter:jmeter jmeter:results -Djmeter.endpoint=$${endpointUrl} -Djmeter.threads=300 -Djmeter.duration=300 -Djmeter.throughput=6000" }
			]
		}
		Identifier = "aws/managed-test@v1"
		Inputs = {
			Artifacts = ["synth"]
			Variables = [{
				Name  = "endpointUrl"
				Value = "$${Deploy.endpointUrl}"
			}]
		}
		Outputs "AutoDiscoverReports" {
			Enabled          = true
			IncludePaths     = ["target/soapui-reports/*"]
			ReportNamePrefix = "gamma_us_east_1"
			SuccessCriteria = {
				PassRate = 100
			}
		}
	}
	DependsOn = ["beta"]
}

action "gamma_us_west_2" {
	action "deploy" {
		Configuration = {
			CfnOutputVariables = jsonencode(["endpointUrl"])
			Context            = jsonencode({ deploymentConfigurationName = "CodeDeployDefault.ECSCanary10Percent5Minutes" })
			Region             = region.us_west_2
			StackName          = "fruit-api"
		}
		DependsOn   = ["beta"]
		Environment = environment.gamma
		Identifier  = "aws/cdk-deploy@v1"
		Inputs = {
			Artifacts = ["synth"]
		}
	}
	action "test" {
		Configuration = {
			Steps = [
				{ Run = "mvn --batch-mode --no-transfer-progress soapui:test -Dsoapui.endpoint=$${endpointUrl}" },
				{ Run = "mvn --batch-mode --no-transfer-progress compile jmeter:jmeter jmeter:results -Djmeter.endpoint=$${endpointUrl} -Djmeter.threads=300 -Djmeter.duration=300 -Djmeter.throughput=6000" }
			]
		}
		Identifier = "aws/managed-test@v1"
		Inputs = {
			Artifacts = ["synth"]
			Variables = [{
				Name  = "endpointUrl"
				Value = "$${Deploy.endpointUrl}"
			}]
		}
		Outputs "AutoDiscoverReports" {
			Enabled          = true
			IncludePaths     = ["target/soapui-reports/*"]
			ReportNamePrefix = "gamma_us_west_2"
			SuccessCriteria = {
				PassRate = 100
			}
		}
	}
	DependsOn = ["beta"]
}

action "prod_us_east_1" {
	action "deploy" {
		Configuration = {
			CfnOutputVariables = jsonencode(["endpointUrl"])
			Context            = jsonencode({ deploymentConfigurationName = "CodeDeployDefault.ECSCanary10Percent5Minutes" })
			Region             = region.us_east_1
			StackName          = "fruit-api"
		}
		DependsOn   = ["gamma_us_west_2", "gamma_us_east_1"]
		Environment = environment.production
		Identifier  = "aws/cdk-deploy@v1"
		Inputs = {
			Artifacts = ["synth"]

		}
	}
	DependsOn = ["gamma_us_west_2", "gamma_us_east_1"]
}

action "prod_us_west_2" {
	action "deploy" {
		Configuration = {
			CfnOutputVariables = jsonencode(["endpointUrl"])
			Context            = jsonencode({ deploymentConfigurationName = "CodeDeployDefault.ECSCanary10Percent5Minutes" })
			Region             = region.us_west_2
			StackName          = "fruit-api"
		}
		DependsOn   = ["gamma_us_west_2", "gamma_us_east_1"]
		Environment = environment.production
		Identifier  = "aws/cdk-deploy@v1"
		Inputs = {
			Artifacts = ["synth"]
		}
	}
	DependsOn = ["gamma_us_west_2", "gamma_us_east_1"]
}
