package main

import (
	"context"
	"fmt"
	"nugg-webauthn/core/pkg/dynamo"
	"nugg-webauthn/core/pkg/hex"
	"reflect"
	"testing"

	"github.com/rs/zerolog"
)

var abc = "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"

func DummyHandler(t *testing.T) *Handler {

	return &Handler{
		Id:     "test",
		Ctx:    context.Background(),
		Config: nil,
		Dynamo: dynamo.NewMockClient(t),
		Logger: zerolog.New(zerolog.NewConsoleWriter()).With().Caller().Timestamp().Logger(),
	}

}

func TestHandler_Invoke(t *testing.T) {

	h := DummyHandler(t)

	tests := []struct {
		name    string
		args    Input
		want    Output
		wantErr bool
	}{
		{
			name: "A",
			args: Input{
				Headers: map[string]string{
					"x-nugg-hex-attestation":      hex.MustBase64ToHash(abc).Hex(),
					"x-nugg-utf-client-data-json": fmt.Sprintf("{\"challenge\":\"%s\",\"origin\":\"https://nugg.xyz\",\"type\":\"webauthn.attest\"}", hex.MustBase64ToHash("YWJj").Hex()),
					"x-nugg-hex-payload":          hex.MustBase64ToHash("abc").Hex(),
				},
			},
			want: Output{
				StatusCode: 204,
				Headers: map[string]string{
					"Content-Length": "0",
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			got, err := h.Invoke(h.Ctx, tt.args)
			if (err != nil) != tt.wantErr {
				t.Errorf("Handler.Invoke() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Handler.Invoke() = %v, want %v", got, tt.want)
			}
		})
	}
}
