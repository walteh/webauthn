package main

import (
	"context"
	"encoding/base64"
	"log"
	"nugg-auth/core/pkg/dynamo"
	"nugg-auth/core/pkg/webauthn/webauthn"

	"reflect"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/rs/zerolog"
)

func DummyHandler(t *testing.T) *Handler {
	dynamoClient := dynamo.NewMockClient(t)

	wan, err := webauthn.New(&webauthn.Config{
		RPDisplayName: "nugg.xyz",
		RPID:          "nugg.xyz",
		RPOrigin:      "https://nugg.xyz",
	})
	if err != nil {
		t.Fatal(err)
	}

	err = dynamoClient.TransactWrite(context.Background(),
		types.TransactWriteItem{
			Put: &types.Put{
				Item: map[string]types.AttributeValue{
					"user_id": &types.AttributeValueMemberS{
						Value: "01GJ5EG3JBH1H2WWG05X8C8WK4",
					},
					"created_at": &types.AttributeValueMemberS{
						Value: "2022-11-18 07:22:54.668188 -0600 CST m=+0.032937709",
					},
					"updated_at": &types.AttributeValueMemberS{
						Value: "2022-11-18 07:22:54.668281 -0600 CST m=+0.033030751",
					},
				},
				TableName: &dynamoClient.UserTableName,
			},
		},
		types.TransactWriteItem{
			Put: &types.Put{
				Item: map[string]types.AttributeValue{
					"credential_id": &types.AttributeValueMemberS{
						Value: "OXWFNNjH1M-zS40v0tHIdnvZ8OM",
					},
					"user_id": &types.AttributeValueMemberS{
						Value: "01GJ5EG3JBH1H2WWG05X8C8WK4",
					},
					"type": &types.AttributeValueMemberS{
						Value: "apple-passkey",
					},
					"created_at": &types.AttributeValueMemberN{
						Value: "1668777774",
					},
					"updated_at": &types.AttributeValueMemberN{
						Value: "1668777774",
					},
					"data": &types.AttributeValueMemberB{
						Value: []uint8{
							0x7b, 0x22, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22,
							0x3a, 0x22, 0x4f, 0x58, 0x57, 0x46, 0x4e, 0x4e, 0x6a, 0x48, 0x31, 0x4d, 0x2b, 0x7a, 0x53, 0x34,
							0x30, 0x76, 0x30, 0x74, 0x48, 0x49, 0x64, 0x6e, 0x76, 0x5a, 0x38, 0x4f, 0x4d, 0x3d, 0x22, 0x2c,
							0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x22, 0x70, 0x51,
							0x45, 0x43, 0x41, 0x79, 0x59, 0x67, 0x41, 0x53, 0x46, 0x59, 0x49, 0x4f, 0x76, 0x47, 0x43, 0x46,
							0x31, 0x4c, 0x52, 0x4c, 0x53, 0x62, 0x49, 0x2b, 0x35, 0x38, 0x57, 0x78, 0x37, 0x41, 0x51, 0x49,
							0x47, 0x48, 0x32, 0x4d, 0x4b, 0x42, 0x50, 0x4a, 0x76, 0x72, 0x41, 0x35, 0x6c, 0x54, 0x44, 0x47,
							0x2f, 0x79, 0x71, 0x4b, 0x62, 0x45, 0x49, 0x6c, 0x67, 0x67, 0x72, 0x72, 0x41, 0x75, 0x33, 0x78,
							0x39, 0x34, 0x59, 0x37, 0x7a, 0x42, 0x61, 0x38, 0x44, 0x4a, 0x6a, 0x77, 0x58, 0x49, 0x49, 0x55,
							0x5a, 0x31, 0x2f, 0x30, 0x62, 0x44, 0x57, 0x71, 0x70, 0x47, 0x68, 0x37, 0x42, 0x6b, 0x46, 0x31,
							0x5a, 0x72, 0x41, 0x43, 0x55, 0x3d, 0x22, 0x2c, 0x22, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
							0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6e, 0x6f, 0x6e, 0x65,
							0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
							0x22, 0x3a, 0x7b, 0x22, 0x61, 0x61, 0x67, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x41, 0x41, 0x41,
							0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
							0x41, 0x41, 0x41, 0x3d, 0x3d, 0x22, 0x2c, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
							0x6e, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x72,
							0x6e, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d, 0x7d,
						},
					},
				},
				TableName: &dynamoClient.CredentialTableName,
			},
		}, types.TransactWriteItem{
			Put: &types.Put{
				Item: map[string]types.AttributeValue{
					"ceremony_id": &types.AttributeValueMemberS{
						Value: "QUJDRA",
					},
					"session_data": &types.AttributeValueMemberM{
						Value: map[string]types.AttributeValue{
							"challenge": &types.AttributeValueMemberS{
								Value: "QUJDRA",
							},
							"user_id": &types.AttributeValueMemberB{
								Value: []uint8{
									0x30, 0x31, 0x47, 0x4a, 0x35, 0x45, 0x47, 0x33, 0x4a, 0x42, 0x48, 0x31, 0x48, 0x32, 0x57, 0x57,
									0x47, 0x30, 0x35, 0x58, 0x38, 0x43, 0x38, 0x57, 0x4b, 0x34,
								},
							},
							"allowed_credentials": &types.AttributeValueMemberBS{
								Value: [][]uint8{
									{
										0x39, 0x75, 0x85, 0x34, 0xd8, 0xc7, 0xd4, 0xcf, 0xb3, 0x4b, 0x8d, 0x2f, 0xd2, 0xd1, 0xc8, 0x76,
										0x7b, 0xd9, 0xf0, 0xe3,
									},
								},
							},
							// "user_verification": &types.AttributeValueMemberS{Value: ""},
						},
					},
					"ttl": &types.AttributeValueMemberN{
						Value: "1669026919",
					},
				},
				TableName: &dynamoClient.CeremonyTableName,
			},
		},
	)

	if err != nil {
		t.Fatal(err)
	}

	return &Handler{
		Id:       "test",
		Ctx:      context.Background(),
		Dynamo:   dynamoClient,
		Config:   nil,
		Logger:   zerolog.New(zerolog.NewConsoleWriter()).With().Caller().Timestamp().Logger(),
		WebAuthn: wan,
		counter:  0,
	}
}
func TestHandler_Invoke(t *testing.T) {

	Handler := DummyHandler(t)

	val := []byte{
		0x4d, 0x44, 0x41, 0x78, 0x4e, 0x44, 0x4d, 0x33, 0x4c, 0x6d, 0x52, 0x6c, 0x5a, 0x6a, 0x55, 0x7a,
		0x4e, 0x57, 0x52, 0x6b, 0x5a, 0x44, 0x6c, 0x6c, 0x4d, 0x6a, 0x52, 0x6a, 0x4e, 0x47, 0x5a, 0x68,
		0x4e, 0x44, 0x4d, 0x32, 0x4e, 0x32, 0x52, 0x6a, 0x59, 0x54, 0x55, 0x77, 0x5a, 0x6d, 0x52, 0x6d,
		0x5a, 0x57, 0x52, 0x69, 0x4c, 0x6a, 0x45, 0x35, 0x4e, 0x54, 0x45, 0x3d,
	}

	res, _ := base64.StdEncoding.DecodeString(string(val))

	log.Println("val", string(res))

	tests := []struct {
		name    string
		args    Input
		want    Output
		wantErr bool
	}{
		{
			name: "A",
			args: Input{
				Headers: map[string]string{
					"x-nugg-webauthn-assertion": "eyJyYXdBdXRoZW50aWNhdG9yRGF0YSI6InFibXI5XC94R3NUVmt0SjFjK0Z2TDgzSDV5Mk1PRFdzMVM4WUxVZUJsMmtnZEFBQUFBQT09Iiwic2lnbmF0dXJlIjoiTUVZQ0lRRG1oUTRnMjRPb3pEV0Y4UlZZNEplZHBvVHlUT1JhbnpjRkIxWnc1S2lvOGdJaEFMUjJZUjRnTHI0ZGZ5ajJWQlhxeTc5SzJCT2xDOWY4dWYzeDcyQldmb3AzIiwidXNlcklEIjoiTURVd1FVUXdRVUV0UWpneU9TMDBRVUl6TFVGR1F6UXROVE0wTURBNVJqWkdOalkwIiwicmF3Q2xpZW50RGF0YUpTT04iOiJleUowZVhCbElqb2lkMlZpWVhWMGFHNHVaMlYwSWl3aVkyaGhiR3hsYm1kbElqb2lVVlZLUkZKQklpd2liM0pwWjJsdUlqb2lhSFIwY0hNNkx5OXVkV2RuTG5oNWVpSjkiLCJjcmVkZW50aWFsSUQiOiJPWFdGTk5qSDFNK3pTNDB2MHRISWRudlo4T009IiwiY3JlZGVudGlhbFR5cGUiOiJwdWJsaWMta2V5In0=",
					// "x-nugg-webauthn-signature":          "MEUCICTeE+VIEJA6TybX3hdSTJfUnHEj0/avUn8J7PqreDe3AiEA+EtknKQf8M48A2BA9b3+dMKTmGqdw8ad6ZBn3T2Ew0c=",
					// "x-nugg-webauthn-clientdata":         "{\"type\":\"webauthn.get\",\"challenge\":\"YWJjMTIz\",\"origin\":\"https://nugg.xyz\"}",
					// "x-nugg-webauthn-credential-id":      "d-84ZOfVwAA4B0IggKLJUy9JUy8=",
					// "x-nugg-webauthn-user-id":            "MDFHSjNZMDQ2SllWMksyUlQzVDcwOFpOWU4",
					// "x-nugg-webauthn-authenticator-data": "qbmr9/xGsTVktJ1c+FvL83H5y2MODWs1S8YLUeBl2kgdAAAAAA==",
				},
			},
			want: Output{
				StatusCode: 204,
				Headers: map[string]string{
					"Content-Length": "0",
				},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			got, err := Handler.Invoke(context.Background(), tt.args)
			if (err != nil) != tt.wantErr {
				t.Errorf("Handler.Invoke() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Handler.Invoke() = %v, want %v", got, tt.want)
			}
		})
	}
}
