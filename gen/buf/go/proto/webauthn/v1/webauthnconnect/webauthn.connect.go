// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/webauthn/v1/webauthn.proto

package webauthnconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/webauthn/gen/buf/go/proto/webauthn/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WebAuthnServiceName is the fully-qualified name of the WebAuthnService service.
	WebAuthnServiceName = "proto.webauthn.v1.WebAuthnService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WebAuthnServiceCreateChallengeProcedure is the fully-qualified name of the WebAuthnService's
	// CreateChallenge RPC.
	WebAuthnServiceCreateChallengeProcedure = "/proto.webauthn.v1.WebAuthnService/CreateChallenge"
	// WebAuthnServiceApplePasskeyCreateProcedure is the fully-qualified name of the WebAuthnService's
	// ApplePasskeyCreate RPC.
	WebAuthnServiceApplePasskeyCreateProcedure = "/proto.webauthn.v1.WebAuthnService/ApplePasskeyCreate"
	// WebAuthnServiceApplePasskeyAssertProcedure is the fully-qualified name of the WebAuthnService's
	// ApplePasskeyAssert RPC.
	WebAuthnServiceApplePasskeyAssertProcedure = "/proto.webauthn.v1.WebAuthnService/ApplePasskeyAssert"
	// WebAuthnServiceAppleDeviceCreateProcedure is the fully-qualified name of the WebAuthnService's
	// AppleDeviceCreate RPC.
	WebAuthnServiceAppleDeviceCreateProcedure = "/proto.webauthn.v1.WebAuthnService/AppleDeviceCreate"
	// WebAuthnServiceAppleDeviceAssertProcedure is the fully-qualified name of the WebAuthnService's
	// AppleDeviceAssert RPC.
	WebAuthnServiceAppleDeviceAssertProcedure = "/proto.webauthn.v1.WebAuthnService/AppleDeviceAssert"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	webAuthnServiceServiceDescriptor                  = v1.File_proto_webauthn_v1_webauthn_proto.Services().ByName("WebAuthnService")
	webAuthnServiceCreateChallengeMethodDescriptor    = webAuthnServiceServiceDescriptor.Methods().ByName("CreateChallenge")
	webAuthnServiceApplePasskeyCreateMethodDescriptor = webAuthnServiceServiceDescriptor.Methods().ByName("ApplePasskeyCreate")
	webAuthnServiceApplePasskeyAssertMethodDescriptor = webAuthnServiceServiceDescriptor.Methods().ByName("ApplePasskeyAssert")
	webAuthnServiceAppleDeviceCreateMethodDescriptor  = webAuthnServiceServiceDescriptor.Methods().ByName("AppleDeviceCreate")
	webAuthnServiceAppleDeviceAssertMethodDescriptor  = webAuthnServiceServiceDescriptor.Methods().ByName("AppleDeviceAssert")
)

// WebAuthnServiceClient is a client for the proto.webauthn.v1.WebAuthnService service.
type WebAuthnServiceClient interface {
	CreateChallenge(context.Context, *connect.Request[v1.CreateChallengeRequest]) (*connect.Response[v1.CreateChallengeResponse], error)
	ApplePasskeyCreate(context.Context, *connect.Request[v1.ApplePasskeyCreateRequest]) (*connect.Response[v1.ApplePasskeyCreateResponse], error)
	ApplePasskeyAssert(context.Context, *connect.Request[v1.ApplePasskeyAssertRequest]) (*connect.Response[v1.ApplePasskeyAssertResponse], error)
	AppleDeviceCreate(context.Context, *connect.Request[v1.AppleDeviceCreateRequest]) (*connect.Response[v1.AppleDeviceCreateResponse], error)
	AppleDeviceAssert(context.Context, *connect.Request[v1.AppleDeviceAssertRequest]) (*connect.Response[v1.AppleDeviceAssertResponse], error)
}

// NewWebAuthnServiceClient constructs a client for the proto.webauthn.v1.WebAuthnService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWebAuthnServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WebAuthnServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &webAuthnServiceClient{
		createChallenge: connect.NewClient[v1.CreateChallengeRequest, v1.CreateChallengeResponse](
			httpClient,
			baseURL+WebAuthnServiceCreateChallengeProcedure,
			connect.WithSchema(webAuthnServiceCreateChallengeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		applePasskeyCreate: connect.NewClient[v1.ApplePasskeyCreateRequest, v1.ApplePasskeyCreateResponse](
			httpClient,
			baseURL+WebAuthnServiceApplePasskeyCreateProcedure,
			connect.WithSchema(webAuthnServiceApplePasskeyCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		applePasskeyAssert: connect.NewClient[v1.ApplePasskeyAssertRequest, v1.ApplePasskeyAssertResponse](
			httpClient,
			baseURL+WebAuthnServiceApplePasskeyAssertProcedure,
			connect.WithSchema(webAuthnServiceApplePasskeyAssertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appleDeviceCreate: connect.NewClient[v1.AppleDeviceCreateRequest, v1.AppleDeviceCreateResponse](
			httpClient,
			baseURL+WebAuthnServiceAppleDeviceCreateProcedure,
			connect.WithSchema(webAuthnServiceAppleDeviceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appleDeviceAssert: connect.NewClient[v1.AppleDeviceAssertRequest, v1.AppleDeviceAssertResponse](
			httpClient,
			baseURL+WebAuthnServiceAppleDeviceAssertProcedure,
			connect.WithSchema(webAuthnServiceAppleDeviceAssertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// webAuthnServiceClient implements WebAuthnServiceClient.
type webAuthnServiceClient struct {
	createChallenge    *connect.Client[v1.CreateChallengeRequest, v1.CreateChallengeResponse]
	applePasskeyCreate *connect.Client[v1.ApplePasskeyCreateRequest, v1.ApplePasskeyCreateResponse]
	applePasskeyAssert *connect.Client[v1.ApplePasskeyAssertRequest, v1.ApplePasskeyAssertResponse]
	appleDeviceCreate  *connect.Client[v1.AppleDeviceCreateRequest, v1.AppleDeviceCreateResponse]
	appleDeviceAssert  *connect.Client[v1.AppleDeviceAssertRequest, v1.AppleDeviceAssertResponse]
}

// CreateChallenge calls proto.webauthn.v1.WebAuthnService.CreateChallenge.
func (c *webAuthnServiceClient) CreateChallenge(ctx context.Context, req *connect.Request[v1.CreateChallengeRequest]) (*connect.Response[v1.CreateChallengeResponse], error) {
	return c.createChallenge.CallUnary(ctx, req)
}

// ApplePasskeyCreate calls proto.webauthn.v1.WebAuthnService.ApplePasskeyCreate.
func (c *webAuthnServiceClient) ApplePasskeyCreate(ctx context.Context, req *connect.Request[v1.ApplePasskeyCreateRequest]) (*connect.Response[v1.ApplePasskeyCreateResponse], error) {
	return c.applePasskeyCreate.CallUnary(ctx, req)
}

// ApplePasskeyAssert calls proto.webauthn.v1.WebAuthnService.ApplePasskeyAssert.
func (c *webAuthnServiceClient) ApplePasskeyAssert(ctx context.Context, req *connect.Request[v1.ApplePasskeyAssertRequest]) (*connect.Response[v1.ApplePasskeyAssertResponse], error) {
	return c.applePasskeyAssert.CallUnary(ctx, req)
}

// AppleDeviceCreate calls proto.webauthn.v1.WebAuthnService.AppleDeviceCreate.
func (c *webAuthnServiceClient) AppleDeviceCreate(ctx context.Context, req *connect.Request[v1.AppleDeviceCreateRequest]) (*connect.Response[v1.AppleDeviceCreateResponse], error) {
	return c.appleDeviceCreate.CallUnary(ctx, req)
}

// AppleDeviceAssert calls proto.webauthn.v1.WebAuthnService.AppleDeviceAssert.
func (c *webAuthnServiceClient) AppleDeviceAssert(ctx context.Context, req *connect.Request[v1.AppleDeviceAssertRequest]) (*connect.Response[v1.AppleDeviceAssertResponse], error) {
	return c.appleDeviceAssert.CallUnary(ctx, req)
}

// WebAuthnServiceHandler is an implementation of the proto.webauthn.v1.WebAuthnService service.
type WebAuthnServiceHandler interface {
	CreateChallenge(context.Context, *connect.Request[v1.CreateChallengeRequest]) (*connect.Response[v1.CreateChallengeResponse], error)
	ApplePasskeyCreate(context.Context, *connect.Request[v1.ApplePasskeyCreateRequest]) (*connect.Response[v1.ApplePasskeyCreateResponse], error)
	ApplePasskeyAssert(context.Context, *connect.Request[v1.ApplePasskeyAssertRequest]) (*connect.Response[v1.ApplePasskeyAssertResponse], error)
	AppleDeviceCreate(context.Context, *connect.Request[v1.AppleDeviceCreateRequest]) (*connect.Response[v1.AppleDeviceCreateResponse], error)
	AppleDeviceAssert(context.Context, *connect.Request[v1.AppleDeviceAssertRequest]) (*connect.Response[v1.AppleDeviceAssertResponse], error)
}

// NewWebAuthnServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWebAuthnServiceHandler(svc WebAuthnServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	webAuthnServiceCreateChallengeHandler := connect.NewUnaryHandler(
		WebAuthnServiceCreateChallengeProcedure,
		svc.CreateChallenge,
		connect.WithSchema(webAuthnServiceCreateChallengeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webAuthnServiceApplePasskeyCreateHandler := connect.NewUnaryHandler(
		WebAuthnServiceApplePasskeyCreateProcedure,
		svc.ApplePasskeyCreate,
		connect.WithSchema(webAuthnServiceApplePasskeyCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webAuthnServiceApplePasskeyAssertHandler := connect.NewUnaryHandler(
		WebAuthnServiceApplePasskeyAssertProcedure,
		svc.ApplePasskeyAssert,
		connect.WithSchema(webAuthnServiceApplePasskeyAssertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webAuthnServiceAppleDeviceCreateHandler := connect.NewUnaryHandler(
		WebAuthnServiceAppleDeviceCreateProcedure,
		svc.AppleDeviceCreate,
		connect.WithSchema(webAuthnServiceAppleDeviceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webAuthnServiceAppleDeviceAssertHandler := connect.NewUnaryHandler(
		WebAuthnServiceAppleDeviceAssertProcedure,
		svc.AppleDeviceAssert,
		connect.WithSchema(webAuthnServiceAppleDeviceAssertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.webauthn.v1.WebAuthnService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WebAuthnServiceCreateChallengeProcedure:
			webAuthnServiceCreateChallengeHandler.ServeHTTP(w, r)
		case WebAuthnServiceApplePasskeyCreateProcedure:
			webAuthnServiceApplePasskeyCreateHandler.ServeHTTP(w, r)
		case WebAuthnServiceApplePasskeyAssertProcedure:
			webAuthnServiceApplePasskeyAssertHandler.ServeHTTP(w, r)
		case WebAuthnServiceAppleDeviceCreateProcedure:
			webAuthnServiceAppleDeviceCreateHandler.ServeHTTP(w, r)
		case WebAuthnServiceAppleDeviceAssertProcedure:
			webAuthnServiceAppleDeviceAssertHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWebAuthnServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWebAuthnServiceHandler struct{}

func (UnimplementedWebAuthnServiceHandler) CreateChallenge(context.Context, *connect.Request[v1.CreateChallengeRequest]) (*connect.Response[v1.CreateChallengeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.webauthn.v1.WebAuthnService.CreateChallenge is not implemented"))
}

func (UnimplementedWebAuthnServiceHandler) ApplePasskeyCreate(context.Context, *connect.Request[v1.ApplePasskeyCreateRequest]) (*connect.Response[v1.ApplePasskeyCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.webauthn.v1.WebAuthnService.ApplePasskeyCreate is not implemented"))
}

func (UnimplementedWebAuthnServiceHandler) ApplePasskeyAssert(context.Context, *connect.Request[v1.ApplePasskeyAssertRequest]) (*connect.Response[v1.ApplePasskeyAssertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.webauthn.v1.WebAuthnService.ApplePasskeyAssert is not implemented"))
}

func (UnimplementedWebAuthnServiceHandler) AppleDeviceCreate(context.Context, *connect.Request[v1.AppleDeviceCreateRequest]) (*connect.Response[v1.AppleDeviceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.webauthn.v1.WebAuthnService.AppleDeviceCreate is not implemented"))
}

func (UnimplementedWebAuthnServiceHandler) AppleDeviceAssert(context.Context, *connect.Request[v1.AppleDeviceAssertRequest]) (*connect.Response[v1.AppleDeviceAssertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.webauthn.v1.WebAuthnService.AppleDeviceAssert is not implemented"))
}
