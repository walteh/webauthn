// Code generated by mockery v2.33.3. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/walteh/webauthn/pkg/webauthn/types"
)

// MockProvider_storage is an autogenerated mock type for the Provider type
type MockProvider_storage struct {
	mock.Mock
}

type MockProvider_storage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider_storage) EXPECT() *MockProvider_storage_Expecter {
	return &MockProvider_storage_Expecter{mock: &_m.Mock}
}

// GetExisting provides a mock function with given fields: ctx, challenge, credid
func (_m *MockProvider_storage) GetExisting(ctx context.Context, challenge string, credid string) (*types.Ceremony, *types.Credential, error) {
	ret := _m.Called(ctx, challenge, credid)

	var r0 *types.Ceremony
	var r1 *types.Credential
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.Ceremony, *types.Credential, error)); ok {
		return rf(ctx, challenge, credid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Ceremony); ok {
		r0 = rf(ctx, challenge, credid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Ceremony)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *types.Credential); ok {
		r1 = rf(ctx, challenge, credid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Credential)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, challenge, credid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProvider_storage_GetExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExisting'
type MockProvider_storage_GetExisting_Call struct {
	*mock.Call
}

// GetExisting is a helper method to define mock.On call
//   - ctx context.Context
//   - challenge string
//   - credid string
func (_e *MockProvider_storage_Expecter) GetExisting(ctx interface{}, challenge interface{}, credid interface{}) *MockProvider_storage_GetExisting_Call {
	return &MockProvider_storage_GetExisting_Call{Call: _e.mock.On("GetExisting", ctx, challenge, credid)}
}

func (_c *MockProvider_storage_GetExisting_Call) Run(run func(ctx context.Context, challenge string, credid string)) *MockProvider_storage_GetExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockProvider_storage_GetExisting_Call) Return(_a0 *types.Ceremony, _a1 *types.Credential, _a2 error) *MockProvider_storage_GetExisting_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProvider_storage_GetExisting_Call) RunAndReturn(run func(context.Context, string, string) (*types.Ceremony, *types.Credential, error)) *MockProvider_storage_GetExisting_Call {
	_c.Call.Return(run)
	return _c
}

// GetExistingCeremony provides a mock function with given fields: ctx, challenge
func (_m *MockProvider_storage) GetExistingCeremony(ctx context.Context, challenge string) (*types.Ceremony, error) {
	ret := _m.Called(ctx, challenge)

	var r0 *types.Ceremony
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Ceremony, error)); ok {
		return rf(ctx, challenge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Ceremony); ok {
		r0 = rf(ctx, challenge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Ceremony)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, challenge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_storage_GetExistingCeremony_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistingCeremony'
type MockProvider_storage_GetExistingCeremony_Call struct {
	*mock.Call
}

// GetExistingCeremony is a helper method to define mock.On call
//   - ctx context.Context
//   - challenge string
func (_e *MockProvider_storage_Expecter) GetExistingCeremony(ctx interface{}, challenge interface{}) *MockProvider_storage_GetExistingCeremony_Call {
	return &MockProvider_storage_GetExistingCeremony_Call{Call: _e.mock.On("GetExistingCeremony", ctx, challenge)}
}

func (_c *MockProvider_storage_GetExistingCeremony_Call) Run(run func(ctx context.Context, challenge string)) *MockProvider_storage_GetExistingCeremony_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProvider_storage_GetExistingCeremony_Call) Return(_a0 *types.Ceremony, _a1 error) *MockProvider_storage_GetExistingCeremony_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_storage_GetExistingCeremony_Call) RunAndReturn(run func(context.Context, string) (*types.Ceremony, error)) *MockProvider_storage_GetExistingCeremony_Call {
	_c.Call.Return(run)
	return _c
}

// GetExistingCredential provides a mock function with given fields: ctx, credid
func (_m *MockProvider_storage) GetExistingCredential(ctx context.Context, credid string) (*types.Credential, error) {
	ret := _m.Called(ctx, credid)

	var r0 *types.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Credential, error)); ok {
		return rf(ctx, credid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Credential); ok {
		r0 = rf(ctx, credid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, credid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_storage_GetExistingCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistingCredential'
type MockProvider_storage_GetExistingCredential_Call struct {
	*mock.Call
}

// GetExistingCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - credid string
func (_e *MockProvider_storage_Expecter) GetExistingCredential(ctx interface{}, credid interface{}) *MockProvider_storage_GetExistingCredential_Call {
	return &MockProvider_storage_GetExistingCredential_Call{Call: _e.mock.On("GetExistingCredential", ctx, credid)}
}

func (_c *MockProvider_storage_GetExistingCredential_Call) Run(run func(ctx context.Context, credid string)) *MockProvider_storage_GetExistingCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProvider_storage_GetExistingCredential_Call) Return(_a0 *types.Credential, _a1 error) *MockProvider_storage_GetExistingCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_storage_GetExistingCredential_Call) RunAndReturn(run func(context.Context, string) (*types.Credential, error)) *MockProvider_storage_GetExistingCredential_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementExistingCredential provides a mock function with given fields: ctx, crm, credid
func (_m *MockProvider_storage) IncrementExistingCredential(ctx context.Context, crm *types.Ceremony, credid string) error {
	ret := _m.Called(ctx, crm, credid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Ceremony, string) error); ok {
		r0 = rf(ctx, crm, credid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_storage_IncrementExistingCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementExistingCredential'
type MockProvider_storage_IncrementExistingCredential_Call struct {
	*mock.Call
}

// IncrementExistingCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - crm *types.Ceremony
//   - credid string
func (_e *MockProvider_storage_Expecter) IncrementExistingCredential(ctx interface{}, crm interface{}, credid interface{}) *MockProvider_storage_IncrementExistingCredential_Call {
	return &MockProvider_storage_IncrementExistingCredential_Call{Call: _e.mock.On("IncrementExistingCredential", ctx, crm, credid)}
}

func (_c *MockProvider_storage_IncrementExistingCredential_Call) Run(run func(ctx context.Context, crm *types.Ceremony, credid string)) *MockProvider_storage_IncrementExistingCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Ceremony), args[2].(string))
	})
	return _c
}

func (_c *MockProvider_storage_IncrementExistingCredential_Call) Return(_a0 error) *MockProvider_storage_IncrementExistingCredential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_storage_IncrementExistingCredential_Call) RunAndReturn(run func(context.Context, *types.Ceremony, string) error) *MockProvider_storage_IncrementExistingCredential_Call {
	_c.Call.Return(run)
	return _c
}

// WriteNewCeremony provides a mock function with given fields: ctx, crm
func (_m *MockProvider_storage) WriteNewCeremony(ctx context.Context, crm *types.Ceremony) error {
	ret := _m.Called(ctx, crm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Ceremony) error); ok {
		r0 = rf(ctx, crm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_storage_WriteNewCeremony_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteNewCeremony'
type MockProvider_storage_WriteNewCeremony_Call struct {
	*mock.Call
}

// WriteNewCeremony is a helper method to define mock.On call
//   - ctx context.Context
//   - crm *types.Ceremony
func (_e *MockProvider_storage_Expecter) WriteNewCeremony(ctx interface{}, crm interface{}) *MockProvider_storage_WriteNewCeremony_Call {
	return &MockProvider_storage_WriteNewCeremony_Call{Call: _e.mock.On("WriteNewCeremony", ctx, crm)}
}

func (_c *MockProvider_storage_WriteNewCeremony_Call) Run(run func(ctx context.Context, crm *types.Ceremony)) *MockProvider_storage_WriteNewCeremony_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Ceremony))
	})
	return _c
}

func (_c *MockProvider_storage_WriteNewCeremony_Call) Return(_a0 error) *MockProvider_storage_WriteNewCeremony_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_storage_WriteNewCeremony_Call) RunAndReturn(run func(context.Context, *types.Ceremony) error) *MockProvider_storage_WriteNewCeremony_Call {
	_c.Call.Return(run)
	return _c
}

// WriteNewCredential provides a mock function with given fields: ctx, crm, cred
func (_m *MockProvider_storage) WriteNewCredential(ctx context.Context, crm *types.Ceremony, cred *types.Credential) error {
	ret := _m.Called(ctx, crm, cred)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Ceremony, *types.Credential) error); ok {
		r0 = rf(ctx, crm, cred)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProvider_storage_WriteNewCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteNewCredential'
type MockProvider_storage_WriteNewCredential_Call struct {
	*mock.Call
}

// WriteNewCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - crm *types.Ceremony
//   - cred *types.Credential
func (_e *MockProvider_storage_Expecter) WriteNewCredential(ctx interface{}, crm interface{}, cred interface{}) *MockProvider_storage_WriteNewCredential_Call {
	return &MockProvider_storage_WriteNewCredential_Call{Call: _e.mock.On("WriteNewCredential", ctx, crm, cred)}
}

func (_c *MockProvider_storage_WriteNewCredential_Call) Run(run func(ctx context.Context, crm *types.Ceremony, cred *types.Credential)) *MockProvider_storage_WriteNewCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Ceremony), args[2].(*types.Credential))
	})
	return _c
}

func (_c *MockProvider_storage_WriteNewCredential_Call) Return(_a0 error) *MockProvider_storage_WriteNewCredential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_storage_WriteNewCredential_Call) RunAndReturn(run func(context.Context, *types.Ceremony, *types.Credential) error) *MockProvider_storage_WriteNewCredential_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider_storage creates a new instance of MockProvider_storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider_storage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider_storage {
	mock := &MockProvider_storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
