// Code generated by mockery v2.39.1. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProvider_accesstoken is an autogenerated mock type for the Provider type
type MockProvider_accesstoken struct {
	mock.Mock
}

type MockProvider_accesstoken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider_accesstoken) EXPECT() *MockProvider_accesstoken_Expecter {
	return &MockProvider_accesstoken_Expecter{mock: &_m.Mock}
}

// AccessTokenForUserID provides a mock function with given fields: ctx, userID
func (_m *MockProvider_accesstoken) AccessTokenForUserID(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for AccessTokenForUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_accesstoken_AccessTokenForUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessTokenForUserID'
type MockProvider_accesstoken_AccessTokenForUserID_Call struct {
	*mock.Call
}

// AccessTokenForUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockProvider_accesstoken_Expecter) AccessTokenForUserID(ctx interface{}, userID interface{}) *MockProvider_accesstoken_AccessTokenForUserID_Call {
	return &MockProvider_accesstoken_AccessTokenForUserID_Call{Call: _e.mock.On("AccessTokenForUserID", ctx, userID)}
}

func (_c *MockProvider_accesstoken_AccessTokenForUserID_Call) Run(run func(ctx context.Context, userID string)) *MockProvider_accesstoken_AccessTokenForUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProvider_accesstoken_AccessTokenForUserID_Call) Return(_a0 string, _a1 error) *MockProvider_accesstoken_AccessTokenForUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_accesstoken_AccessTokenForUserID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockProvider_accesstoken_AccessTokenForUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider_accesstoken creates a new instance of MockProvider_accesstoken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider_accesstoken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider_accesstoken {
	mock := &MockProvider_accesstoken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
