// Code generated by mockery v2.33.0. DO NOT EDIT.

package mockery

import (
	context "context"

	cognitoidentity "github.com/aws/aws-sdk-go-v2/service/cognitoidentity"

	mock "github.com/stretchr/testify/mock"
)

// MockAWSCognitoClient_cognito is an autogenerated mock type for the AWSCognitoClient type
type MockAWSCognitoClient_cognito struct {
	mock.Mock
}

type MockAWSCognitoClient_cognito_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSCognitoClient_cognito) EXPECT() *MockAWSCognitoClient_cognito_Expecter {
	return &MockAWSCognitoClient_cognito_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function with given fields: ctx, params, optFns
func (_m *MockAWSCognitoClient_cognito) GetId(ctx context.Context, params *cognitoidentity.GetIdInput, optFns ...func(*cognitoidentity.Options)) (*cognitoidentity.GetIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentity.GetIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentity.GetIdInput, ...func(*cognitoidentity.Options)) (*cognitoidentity.GetIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentity.GetIdInput, ...func(*cognitoidentity.Options)) *cognitoidentity.GetIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentity.GetIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentity.GetIdInput, ...func(*cognitoidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSCognitoClient_cognito_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type MockAWSCognitoClient_cognito_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentity.GetIdInput
//   - optFns ...func(*cognitoidentity.Options)
func (_e *MockAWSCognitoClient_cognito_Expecter) GetId(ctx interface{}, params interface{}, optFns ...interface{}) *MockAWSCognitoClient_cognito_GetId_Call {
	return &MockAWSCognitoClient_cognito_GetId_Call{Call: _e.mock.On("GetId",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockAWSCognitoClient_cognito_GetId_Call) Run(run func(ctx context.Context, params *cognitoidentity.GetIdInput, optFns ...func(*cognitoidentity.Options))) *MockAWSCognitoClient_cognito_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentity.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentity.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentity.GetIdInput), variadicArgs...)
	})
	return _c
}

func (_c *MockAWSCognitoClient_cognito_GetId_Call) Return(_a0 *cognitoidentity.GetIdOutput, _a1 error) *MockAWSCognitoClient_cognito_GetId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSCognitoClient_cognito_GetId_Call) RunAndReturn(run func(context.Context, *cognitoidentity.GetIdInput, ...func(*cognitoidentity.Options)) (*cognitoidentity.GetIdOutput, error)) *MockAWSCognitoClient_cognito_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenIdTokenForDeveloperIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *MockAWSCognitoClient_cognito) GetOpenIdTokenForDeveloperIdentity(ctx context.Context, params *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, optFns ...func(*cognitoidentity.Options)) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, ...func(*cognitoidentity.Options)) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, ...func(*cognitoidentity.Options)) *cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, ...func(*cognitoidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenIdTokenForDeveloperIdentity'
type MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call struct {
	*mock.Call
}

// GetOpenIdTokenForDeveloperIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput
//   - optFns ...func(*cognitoidentity.Options)
func (_e *MockAWSCognitoClient_cognito_Expecter) GetOpenIdTokenForDeveloperIdentity(ctx interface{}, params interface{}, optFns ...interface{}) *MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call {
	return &MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call{Call: _e.mock.On("GetOpenIdTokenForDeveloperIdentity",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call) Run(run func(ctx context.Context, params *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, optFns ...func(*cognitoidentity.Options))) *MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cognitoidentity.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cognitoidentity.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput), variadicArgs...)
	})
	return _c
}

func (_c *MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call) Return(_a0 *cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, _a1 error) *MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call) RunAndReturn(run func(context.Context, *cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput, ...func(*cognitoidentity.Options)) (*cognitoidentity.GetOpenIdTokenForDeveloperIdentityOutput, error)) *MockAWSCognitoClient_cognito_GetOpenIdTokenForDeveloperIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAWSCognitoClient_cognito creates a new instance of MockAWSCognitoClient_cognito. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAWSCognitoClient_cognito(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAWSCognitoClient_cognito {
	mock := &MockAWSCognitoClient_cognito{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
